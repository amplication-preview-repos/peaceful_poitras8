/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OAuthProvider } from "./OAuthProvider";
import { OAuthProviderCountArgs } from "./OAuthProviderCountArgs";
import { OAuthProviderFindManyArgs } from "./OAuthProviderFindManyArgs";
import { OAuthProviderFindUniqueArgs } from "./OAuthProviderFindUniqueArgs";
import { CreateOAuthProviderArgs } from "./CreateOAuthProviderArgs";
import { UpdateOAuthProviderArgs } from "./UpdateOAuthProviderArgs";
import { DeleteOAuthProviderArgs } from "./DeleteOAuthProviderArgs";
import { User } from "../../user/base/User";
import { OAuthProviderService } from "../oAuthProvider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OAuthProvider)
export class OAuthProviderResolverBase {
  constructor(
    protected readonly service: OAuthProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OAuthProvider",
    action: "read",
    possession: "any",
  })
  async _oAuthProvidersMeta(
    @graphql.Args() args: OAuthProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OAuthProvider])
  @nestAccessControl.UseRoles({
    resource: "OAuthProvider",
    action: "read",
    possession: "any",
  })
  async oAuthProviders(
    @graphql.Args() args: OAuthProviderFindManyArgs
  ): Promise<OAuthProvider[]> {
    return this.service.oAuthProviders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OAuthProvider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OAuthProvider",
    action: "read",
    possession: "own",
  })
  async oAuthProvider(
    @graphql.Args() args: OAuthProviderFindUniqueArgs
  ): Promise<OAuthProvider | null> {
    const result = await this.service.oAuthProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OAuthProvider)
  @nestAccessControl.UseRoles({
    resource: "OAuthProvider",
    action: "create",
    possession: "any",
  })
  async createOAuthProvider(
    @graphql.Args() args: CreateOAuthProviderArgs
  ): Promise<OAuthProvider> {
    return await this.service.createOAuthProvider({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OAuthProvider)
  @nestAccessControl.UseRoles({
    resource: "OAuthProvider",
    action: "update",
    possession: "any",
  })
  async updateOAuthProvider(
    @graphql.Args() args: UpdateOAuthProviderArgs
  ): Promise<OAuthProvider | null> {
    try {
      return await this.service.updateOAuthProvider({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OAuthProvider)
  @nestAccessControl.UseRoles({
    resource: "OAuthProvider",
    action: "delete",
    possession: "any",
  })
  async deleteOAuthProvider(
    @graphql.Args() args: DeleteOAuthProviderArgs
  ): Promise<OAuthProvider | null> {
    try {
      return await this.service.deleteOAuthProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: OAuthProvider): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
