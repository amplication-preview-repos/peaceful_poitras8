/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OAuthProvider as PrismaOAuthProvider,
  User as PrismaUser,
} from "@prisma/client";

export class OAuthProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OAuthProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.oAuthProvider.count(args);
  }

  async oAuthProviders(
    args: Prisma.OAuthProviderFindManyArgs
  ): Promise<PrismaOAuthProvider[]> {
    return this.prisma.oAuthProvider.findMany(args);
  }
  async oAuthProvider(
    args: Prisma.OAuthProviderFindUniqueArgs
  ): Promise<PrismaOAuthProvider | null> {
    return this.prisma.oAuthProvider.findUnique(args);
  }
  async createOAuthProvider(
    args: Prisma.OAuthProviderCreateArgs
  ): Promise<PrismaOAuthProvider> {
    return this.prisma.oAuthProvider.create(args);
  }
  async updateOAuthProvider(
    args: Prisma.OAuthProviderUpdateArgs
  ): Promise<PrismaOAuthProvider> {
    return this.prisma.oAuthProvider.update(args);
  }
  async deleteOAuthProvider(
    args: Prisma.OAuthProviderDeleteArgs
  ): Promise<PrismaOAuthProvider> {
    return this.prisma.oAuthProvider.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.oAuthProvider
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
